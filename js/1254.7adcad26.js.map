{"version":3,"file":"js/1254.7adcad26.js","mappings":"4NAGA,MACMA,EAAa,CAAEC,MAAO,mBACtBC,EAAa,CACjBC,IAAK,EACLF,MAAO,eAEHG,EAAa,CAAEH,MAAO,cAQ5B,OAA4BI,EAAAA,EAAAA,IAAiB,CAC3CC,OAAQ,QACRC,KAAAA,CAAMC,GCwCR,MAAMC,GAASC,EAAAA,EAAAA,IAAI,IACbC,GAAcC,EAAAA,EAAAA,IAAU,iBACxBC,GAAiBH,EAAAA,EAAAA,IAAI,MACrBI,GAAeJ,EAAAA,EAAAA,KAAI,GAGnBK,EAAeA,KACnBD,EAAaE,OAASF,EAAaE,KAAK,EAIpCC,EAAcC,UAClBL,EAAeG,MAAmB,QAAXG,EAAmB,KAAOA,EACjDL,EAAaE,OAAQ,EACrB,IACE,MAAMI,QAAiBC,EAAAA,EAAMC,IAC3B,gDAAsDH,IACtD,CACEI,QAAS,CACPC,cAAe,UAAUb,OAI/BF,EAAOO,MAAQI,EAASK,KAAKC,QAE7BC,QAAQC,IAAInB,EAAOO,M,CACnB,MAAOa,GACPF,QAAQE,MAAM,yBAA0BA,E,GD/B5C,OCoCAC,EAAAA,EAAAA,KAAU,IAAMb,EAAY,SDpCrB,CAACc,EAAUC,MACRC,EAAAA,EAAAA,OAAcC,EAAAA,EAAAA,IAAoB,MAAOlC,EAAY,EAC3DmC,EAAAA,EAAAA,IAAoB,MAAO,CACzBlC,OAAOmC,EAAAA,EAAAA,IAAgB,CAAC,SAAU,CAAEC,OAAQvB,EAAaE,SACzDsB,QAASvB,GACR,EACDoB,EAAAA,EAAAA,IAAoB,OAAQ,MAAMI,EAAAA,EAAAA,IAAiB1B,EAAeG,OAAS,KAAM,IAChF,GACFF,EAAaE,QACTiB,EAAAA,EAAAA,OAAcC,EAAAA,EAAAA,IAAoB,MAAOhC,EAAY,EACpDiC,EAAAA,EAAAA,IAAoB,MAAO,CACzBlC,OAAOmC,EAAAA,EAAAA,IAAgB,CAAC,cAAe,CAAEC,OAAiC,QAAzBxB,EAAeG,SAChEsB,QAASN,EAAO,KAAOA,EAAO,GAAMQ,GAAiBvB,EAAY,SAChE,OAAQ,IACXkB,EAAAA,EAAAA,IAAoB,MAAO,CACzBlC,OAAOmC,EAAAA,EAAAA,IAAgB,CAAC,cAAe,CAAEC,OAAiC,aAAzBxB,EAAeG,SAChEsB,QAASN,EAAO,KAAOA,EAAO,GAAMQ,GAAiBvB,EAAY,cAChE,QAAS,IACZkB,EAAAA,EAAAA,IAAoB,MAAO,CACzBlC,OAAOmC,EAAAA,EAAAA,IAAgB,CAAC,cAAe,CAAEC,OAAiC,cAAzBxB,EAAeG,SAChEsB,QAASN,EAAO,KAAOA,EAAO,GAAMQ,GAAiBvB,EAAY,eAChE,SAAU,IACbkB,EAAAA,EAAAA,IAAoB,MAAO,CACzBlC,OAAOmC,EAAAA,EAAAA,IAAgB,CAAC,cAAe,CAAEC,OAAiC,QAAzBxB,EAAeG,SAChEsB,QAASN,EAAO,KAAOA,EAAO,GAAMQ,GAAiBvB,EAAY,SAChE,OAAQ,OAEbwB,EAAAA,EAAAA,IAAoB,IAAI,IAC5BN,EAAAA,EAAAA,IAAoB,MAAO/B,EAAY,GACpC6B,EAAAA,EAAAA,KAAW,IAAOC,EAAAA,EAAAA,IAAoBQ,EAAAA,GAAW,MAAMC,EAAAA,EAAAA,IAAYlC,EAAOO,OAAQ4B,KACzEX,EAAAA,EAAAA,OAAcY,EAAAA,EAAAA,KAAaC,EAAAA,EAAAA,IAAOC,EAAAA,IAAY,CACpD5C,IAAKyC,EAAMI,QACXJ,MAAOA,EACP3C,MAAO,cACN,KAAM,EAAG,CAAC,aACX,UAIV,I,UExFA,MAAMgD,GAA2B,OAAgB,EAAQ,CAAC,CAAC,YAAY,qBAEvE,O","sources":["webpack://frontend/./src/views/home/Event.vue?55af","webpack://frontend/./src/views/home/Event.vue","webpack://frontend/./src/views/home/Event.vue?6931"],"sourcesContent":["import { defineComponent as _defineComponent } from 'vue'\nimport { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, normalizeClass as _normalizeClass, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, unref as _unref, createBlock as _createBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\"\n\nconst _withScopeId = (n: any) => (_pushScopeId(\"data-v-5392d7ba\"),n=n(),_popScopeId(),n)\nconst _hoisted_1 = { class: \"event-container\" }\nconst _hoisted_2 = {\n  key: 0,\n  class: \"filter-list\"\n}\nconst _hoisted_3 = { class: \"event-list\" }\n\nimport { ref, onMounted } from 'vue';\r\nimport { EventCard } from './components';\r\nimport axios from 'axios';\r\nimport { getCookie } from '@/utils';\r\n\r\n\nexport default /*#__PURE__*/_defineComponent({\n  __name: 'Event',\n  setup(__props) {\n\r\nconst events = ref([]);\r\nconst accessToken = getCookie('Authorization');\r\nconst selectedFilter = ref('전체');\r\nconst isFilterOpen = ref(false);\r\n\r\n// 필터 토글 함수\r\nconst toggleFilter = () => {\r\n  isFilterOpen.value = !isFilterOpen.value;\r\n};\r\n\r\n// 이벤트 데이터를 가져오는 함수\r\nconst fetchEvents = async (status) => {\r\n  selectedFilter.value = status === 'ALL' ? '전체' : status; // 선택한 필터 업데이트\r\n  isFilterOpen.value = false; // 필터 닫기\r\n  try {\r\n    const response = await axios.get(\r\n      `${process.env.VUE_APP_BASE_API}/api/v1/event?query=${status}`,\r\n      {\r\n        headers: {\r\n          Authorization: `Bearer ${accessToken}`,\r\n        },\r\n      }\r\n    );\r\n    events.value = response.data.content;\r\n\r\n    console.log(events.value);\r\n  } catch (error) {\r\n    console.error('이벤트 데이터를 가져오는 중 오류 발생:', error);\r\n  }\r\n};\r\n\r\n// 처음에는 전체 이벤트를 가져오도록 호출\r\nonMounted(() => fetchEvents('ALL'));\r\n\nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n    _createElementVNode(\"div\", {\n      class: _normalizeClass([\"filter\", { active: isFilterOpen.value }]),\n      onClick: toggleFilter\n    }, [\n      _createElementVNode(\"span\", null, _toDisplayString(selectedFilter.value) + \" ▼\", 1)\n    ], 2),\n    (isFilterOpen.value)\n      ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [\n          _createElementVNode(\"div\", {\n            class: _normalizeClass([\"filter-item\", { active: selectedFilter.value === 'ALL' }]),\n            onClick: _cache[0] || (_cache[0] = ($event: any) => (fetchEvents('ALL')))\n          }, \" 전체 \", 2),\n          _createElementVNode(\"div\", {\n            class: _normalizeClass([\"filter-item\", { active: selectedFilter.value === 'PROGRESS' }]),\n            onClick: _cache[1] || (_cache[1] = ($event: any) => (fetchEvents('PROGRESS')))\n          }, \" 진행중 \", 2),\n          _createElementVNode(\"div\", {\n            class: _normalizeClass([\"filter-item\", { active: selectedFilter.value === 'SCHEDULED' }]),\n            onClick: _cache[2] || (_cache[2] = ($event: any) => (fetchEvents('SCHEDULED')))\n          }, \" 진행완료 \", 2),\n          _createElementVNode(\"div\", {\n            class: _normalizeClass([\"filter-item\", { active: selectedFilter.value === 'END' }]),\n            onClick: _cache[3] || (_cache[3] = ($event: any) => (fetchEvents('END')))\n          }, \" 종료 \", 2)\n        ]))\n      : _createCommentVNode(\"\", true),\n    _createElementVNode(\"div\", _hoisted_3, [\n      (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(events.value, (event) => {\n        return (_openBlock(), _createBlock(_unref(EventCard), {\n          key: event.eventId,\n          event: event,\n          class: \"event-item\"\n        }, null, 8, [\"event\"]))\n      }), 128))\n    ])\n  ]))\n}\n}\n\n})","<template>\r\n  <div class=\"event-container\">\r\n    <div\r\n      class=\"filter\"\r\n      @click=\"toggleFilter\"\r\n      :class=\"{ active: isFilterOpen }\"\r\n    >\r\n      <span>{{ selectedFilter }} ▼</span>\r\n    </div>\r\n    <div\r\n      class=\"filter-list\"\r\n      v-if=\"isFilterOpen\"\r\n    >\r\n      <div\r\n        class=\"filter-item\"\r\n        :class=\"{ active: selectedFilter === 'ALL' }\"\r\n        @click=\"fetchEvents('ALL')\"\r\n      >\r\n        전체\r\n      </div>\r\n      <div\r\n        class=\"filter-item\"\r\n        :class=\"{ active: selectedFilter === 'PROGRESS' }\"\r\n        @click=\"fetchEvents('PROGRESS')\"\r\n      >\r\n        진행중\r\n      </div>\r\n      <div\r\n        class=\"filter-item\"\r\n        :class=\"{ active: selectedFilter === 'SCHEDULED' }\"\r\n        @click=\"fetchEvents('SCHEDULED')\"\r\n      >\r\n        진행완료\r\n      </div>\r\n      <div\r\n        class=\"filter-item\"\r\n        :class=\"{ active: selectedFilter === 'END' }\"\r\n        @click=\"fetchEvents('END')\"\r\n      >\r\n        종료\r\n      </div>\r\n    </div>\r\n    <div class=\"event-list\">\r\n      <EventCard\r\n        v-for=\"event in events\"\r\n        :key=\"event.eventId\"\r\n        :event=\"event\"\r\n        class=\"event-item\"\r\n      />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { ref, onMounted } from 'vue';\r\nimport { EventCard } from './components';\r\nimport axios from 'axios';\r\nimport { getCookie } from '@/utils';\r\n\r\nconst events = ref([]);\r\nconst accessToken = getCookie('Authorization');\r\nconst selectedFilter = ref('전체');\r\nconst isFilterOpen = ref(false);\r\n\r\n// 필터 토글 함수\r\nconst toggleFilter = () => {\r\n  isFilterOpen.value = !isFilterOpen.value;\r\n};\r\n\r\n// 이벤트 데이터를 가져오는 함수\r\nconst fetchEvents = async (status) => {\r\n  selectedFilter.value = status === 'ALL' ? '전체' : status; // 선택한 필터 업데이트\r\n  isFilterOpen.value = false; // 필터 닫기\r\n  try {\r\n    const response = await axios.get(\r\n      `${process.env.VUE_APP_BASE_API}/api/v1/event?query=${status}`,\r\n      {\r\n        headers: {\r\n          Authorization: `Bearer ${accessToken}`,\r\n        },\r\n      }\r\n    );\r\n    events.value = response.data.content;\r\n\r\n    console.log(events.value);\r\n  } catch (error) {\r\n    console.error('이벤트 데이터를 가져오는 중 오류 발생:', error);\r\n  }\r\n};\r\n\r\n// 처음에는 전체 이벤트를 가져오도록 호출\r\nonMounted(() => fetchEvents('ALL'));\r\n</script>\r\n\r\n<style scoped>\r\n.event-container {\r\n  display: flex;\r\n  margin-top: 40px;\r\n  flex-direction: column;\r\n  gap: 40px;\r\n}\r\n\r\n.filter {\r\n  padding: 10px 20px;\r\n  border-radius: var(--radius-s);\r\n  background-color: var(--color-light-gray);\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.filter.active {\r\n  background-color: var(--color-primary);\r\n  color: white; /* 선택된 항목의 글자색 */\r\n}\r\n\r\n.filter-list {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 10px;\r\n}\r\n\r\n.filter-item {\r\n  padding: 10px 20px;\r\n  border-radius: var(--radius-s);\r\n  background-color: var(--color-light-gray);\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.filter-item.active {\r\n  background-color: var(--color-primary);\r\n  color: white; /* 선택된 항목의 글자색 */\r\n}\r\n\r\n.filter-item:hover {\r\n  background-color: var(--color-gray);\r\n}\r\n\r\n.event-list {\r\n  gap: var(--margin-m2);\r\n  padding: 0px 20px 0px 20px;\r\n  display: grid;\r\n}\r\n\r\n.event-item {\r\n  width: 225px;\r\n}\r\n</style>\r\n","import script from \"./Event.vue?vue&type=script&setup=true&lang=ts\"\nexport * from \"./Event.vue?vue&type=script&setup=true&lang=ts\"\n\nimport \"./Event.vue?vue&type=style&index=0&id=5392d7ba&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-5392d7ba\"]])\n\nexport default __exports__"],"names":["_hoisted_1","class","_hoisted_2","key","_hoisted_3","_defineComponent","__name","setup","__props","events","ref","accessToken","getCookie","selectedFilter","isFilterOpen","toggleFilter","value","fetchEvents","async","status","response","axios","get","headers","Authorization","data","content","console","log","error","onMounted","_ctx","_cache","_openBlock","_createElementBlock","_createElementVNode","_normalizeClass","active","onClick","_toDisplayString","$event","_createCommentVNode","_Fragment","_renderList","event","_createBlock","_unref","EventCard","eventId","__exports__"],"sourceRoot":""}