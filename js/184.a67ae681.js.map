{"version":3,"file":"js/184.a67ae681.js","mappings":"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","sources":["webpack://frontend/./src/apis/authorityFeature/index.ts","webpack://frontend/./src/views/auth/FindIDByPhone.vue?eed7","webpack://frontend/./src/views/auth/FindIDByPhone.vue","webpack://frontend/./src/views/auth/FindIDByPhone.vue?ffec"],"sourcesContent":["import axios from 'axios';\n\nconst headers: Record<string, string> = {\n  'Content-Type': 'application/json',\n};\n\nconst handleAxiosError = (error: unknown) => {\n  const errorCode =\n    axios.isAxiosError(error) && error.response\n      ? error.response.data.errorCode\n      : null;\n  throw { originalError: error, errorCode };\n};\n\nexport const sendSms = async (name: string, phoneNumber: string) => {\n  try {\n    const url = `${process.env.VUE_APP_BASE_API}/api/v1/auth/sms/send`;\n    const data = { name, phoneNumber };\n    const response = await axios.post(url, data, {\n      headers,\n    });\n\n    return response.data;\n  } catch (error) {\n    handleAxiosError(error);\n  }\n};\n\nexport const checkSms = async (\n  name: string,\n  phoneNumber: string,\n  verificationCode: string\n) => {\n  try {\n    const url = `${process.env.VUE_APP_BASE_API}/api/v1/auth/sms/check`;\n    const data = { name, phoneNumber, verificationCode };\n    const response = await axios.post(url, data, {\n      headers,\n    });\n\n    return response.data;\n  } catch (error) {\n    handleAxiosError(error);\n  }\n};\n\nexport const sendSmsLater = async (name: string, phoneNumber: string) => {\n  try {\n    const url = `${process.env.VUE_APP_BASE_API}/api/v1/auth/sms/send/later`;\n    const data = { name, phoneNumber };\n    const response = await axios.post(url, data, {\n      headers,\n    });\n\n    return response.data;\n  } catch (error) {\n    handleAxiosError(error);\n  }\n};\n\nexport const sendEmail = async (email: string) => {\n  try {\n    const url = `${process.env.VUE_APP_BASE_API}/api/v1/auth/authentication/send`;\n    const response = await axios.post(\n      url,\n      { email },\n      {\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      }\n    );\n    return response.data;\n  } catch (error) {\n    const errorCode =\n      axios.isAxiosError(error) && error.response\n        ? error.response.data.errorCode\n        : null;\n    throw { originalError: error, errorCode };\n  }\n};\n\nexport const checkEmail = async (email: string, authCode: string) => {\n  try {\n    const url = `${process.env.VUE_APP_BASE_API}/api/v1/auth/authentication/check`;\n    const data = { email, authCode };\n    const response = await axios.post(url, data, {\n      headers,\n    });\n\n    return response.data;\n  } catch (error) {\n    handleAxiosError(error);\n  }\n};\n\nexport const findUserId = async (name: string, phoneNumber: string) => {\n  try {\n    const url = `${process.env.VUE_APP_BASE_API}/api/v1/auth/find/id`;\n    const data = { name, phoneNumber };\n    const response = await axios.post(url, data);\n\n    return response.data;\n  } catch (error) {\n    handleAxiosError(error);\n  }\n};\n\nexport const sendEmailLater = async (email: string, authCode: string) => {\n  try {\n    const url = `${process.env.VUE_APP_BASE_API}/api/v1/auth/authentication/check/later`;\n    const data = { email, authCode };\n    const response = await axios.post(url, data);\n\n    return response.data;\n  } catch (error) {\n    handleAxiosError(error);\n  }\n};\n","import { defineComponent as _defineComponent } from 'vue'\nimport { unref as _unref, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\"\n\nconst _withScopeId = (n: any) => (_pushScopeId(\"data-v-57e3e2fd\"),n=n(),_popScopeId(),n)\nconst _hoisted_1 = { class: \"verification-container\" }\nconst _hoisted_2 = { class: \"input-group\" }\n\nimport { ref, reactive } from 'vue';\r\nimport { useRouter } from 'vue-router';\r\nimport { sendSmsLater, checkSms } from '@/apis/authorityFeature';\r\nimport { autoHyphen, validatePhoneNumber } from '@/utils';\r\nimport { Button, Input } from '@/components';\r\n\r\n\nexport default /*#__PURE__*/_defineComponent({\n  __name: 'FindIDByPhone',\n  setup(__props) {\n\r\nconst router = useRouter();\r\n\r\nconst state = reactive({\r\n  verificationSent: false,\r\n  verificationExpired: false,\r\n});\r\n\r\nconst name = ref('');\r\nconst nameState = ref('default');\r\nconst phoneNumber = ref('');\r\nconst phoneNumberState = ref('default');\r\nconst verificationCode = ref('');\r\nconst codeState = ref('default');\r\nconst codeMessage = ref('');\r\n\r\nconst sendVerificationCode = async () => {\r\n  if (name.value.length === 0) {\r\n    nameState.value = 'error';\r\n    return;\r\n  }\r\n  nameState.value = 'default';\r\n\r\n  const cleanedPhoneNumber = phoneNumber.value.replace(/-/g, '');\r\n  if (!validatePhoneNumber(cleanedPhoneNumber)) {\r\n    phoneNumberState.value = 'error';\r\n    return;\r\n  }\r\n  phoneNumberState.value = 'default';\r\n\r\n  try {\r\n    await sendSmsLater(name.value, cleanedPhoneNumber);\r\n    state.verificationSent = true;\r\n  } catch (error) {\r\n    const smsError = error as { errorCode: string | null };\r\n    if (smsError.errorCode === 'INVALID_VALUE_04') {\r\n      codeState.value = 'error';\r\n      codeMessage.value = '이미 계정이 존재합니다.';\r\n    }\r\n  }\r\n};\r\n\r\nconst checkVerificationCode = async () => {\r\n  if (!state.verificationSent) return;\r\n\r\n  try {\r\n    const cleanedPhoneNumber = phoneNumber.value.replace(/-/g, '');\r\n    await checkSms(name.value, cleanedPhoneNumber, verificationCode.value);\r\n    router.push({\r\n      name: 'find-id-result',\r\n      query: {\r\n        name: name.value,\r\n        phoneNumber: cleanedPhoneNumber,\r\n      },\r\n    });\r\n  } catch (error) {\r\n    const smsError = error as { errorCode: string | null };\r\n    if (smsError.errorCode === 'AUTH_03') {\r\n      codeState.value = 'error';\r\n      codeMessage.value = '인증번호가 틀렸습니다.';\r\n    }\r\n  }\r\n};\r\n\nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n    _createElementVNode(\"span\", _hoisted_2, [\n      _createVNode(_unref(Input), {\n        placeholder: \"이름을 입력해주세요\",\n        label: \"이름\",\n        modelValue: name.value,\n        \"onUpdate:modelValue\": _cache[0] || (_cache[0] = ($event: any) => ((name).value = $event)),\n        state: nameState.value\n      }, null, 8, [\"modelValue\", \"state\"]),\n      _createVNode(_unref(Input), {\n        placeholder: \"000-0000-0000\",\n        onInput: _unref(autoHyphen),\n        maxlength: \"13\",\n        label: \"휴대폰 번호\",\n        modelValue: phoneNumber.value,\n        \"onUpdate:modelValue\": _cache[1] || (_cache[1] = ($event: any) => ((phoneNumber).value = $event)),\n        state: phoneNumberState.value,\n        message: \"가입 시 등록한 휴대폰 번호를 입력해주세요\"\n      }, null, 8, [\"onInput\", \"modelValue\", \"state\"]),\n      (!state.verificationSent)\n        ? (_openBlock(), _createBlock(_unref(Button), {\n            key: 0,\n            text: \"인증번호 받기\",\n            onClick: sendVerificationCode,\n            style: {\r\n          backgroundColor: 'var(--color-button-secondary)',\r\n          color: 'var(--color-button-on-secondary)',\r\n          height: '44px',\r\n          fontSize: '1.4rem',\r\n        }\n          }))\n        : _createCommentVNode(\"\", true),\n      (state.verificationSent)\n        ? (_openBlock(), _createBlock(_unref(Input), {\n            key: 1,\n            placeholder: \"인증번호 입력\",\n            label: \"인증번호\",\n            modelValue: verificationCode.value,\n            \"onUpdate:modelValue\": _cache[2] || (_cache[2] = ($event: any) => ((verificationCode).value = $event)),\n            state: codeState.value,\n            message: codeMessage.value\n          }, null, 8, [\"modelValue\", \"state\", \"message\"]))\n        : _createCommentVNode(\"\", true)\n    ]),\n    (state.verificationSent)\n      ? (_openBlock(), _createBlock(_unref(Button), {\n          key: 0,\n          class: \"next-button\",\n          onClick: checkVerificationCode,\n          text: \"다음\"\n        }))\n      : _createCommentVNode(\"\", true)\n  ]))\n}\n}\n\n})","<template>\r\n  <div class=\"verification-container\">\r\n    <span class=\"input-group\">\r\n      <Input\r\n        placeholder=\"이름을 입력해주세요\"\r\n        label=\"이름\"\r\n        v-model=\"name\"\r\n        :state=\"nameState\"\r\n      />\r\n      <Input\r\n        placeholder=\"000-0000-0000\"\r\n        @input=\"autoHyphen\"\r\n        maxlength=\"13\"\r\n        label=\"휴대폰 번호\"\r\n        v-model=\"phoneNumber\"\r\n        :state=\"phoneNumberState\"\r\n        message=\"가입 시 등록한 휴대폰 번호를 입력해주세요\"\r\n      />\r\n      <Button\r\n        v-if=\"!state.verificationSent\"\r\n        text=\"인증번호 받기\"\r\n        @click=\"sendVerificationCode\"\r\n        :style=\"{\r\n          backgroundColor: 'var(--color-button-secondary)',\r\n          color: 'var(--color-button-on-secondary)',\r\n          height: '44px',\r\n          fontSize: '1.4rem',\r\n        }\"\r\n      />\r\n      <Input\r\n        v-if=\"state.verificationSent\"\r\n        placeholder=\"인증번호 입력\"\r\n        label=\"인증번호\"\r\n        v-model=\"verificationCode\"\r\n        :state=\"codeState\"\r\n        :message=\"codeMessage\"\r\n      />\r\n    </span>\r\n    <Button\r\n      v-if=\"state.verificationSent\"\r\n      class=\"next-button\"\r\n      @click=\"checkVerificationCode\"\r\n      text=\"다음\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { ref, reactive } from 'vue';\r\nimport { useRouter } from 'vue-router';\r\nimport { sendSmsLater, checkSms } from '@/apis/authorityFeature';\r\nimport { autoHyphen, validatePhoneNumber } from '@/utils';\r\nimport { Button, Input } from '@/components';\r\n\r\nconst router = useRouter();\r\n\r\nconst state = reactive({\r\n  verificationSent: false,\r\n  verificationExpired: false,\r\n});\r\n\r\nconst name = ref('');\r\nconst nameState = ref('default');\r\nconst phoneNumber = ref('');\r\nconst phoneNumberState = ref('default');\r\nconst verificationCode = ref('');\r\nconst codeState = ref('default');\r\nconst codeMessage = ref('');\r\n\r\nconst sendVerificationCode = async () => {\r\n  if (name.value.length === 0) {\r\n    nameState.value = 'error';\r\n    return;\r\n  }\r\n  nameState.value = 'default';\r\n\r\n  const cleanedPhoneNumber = phoneNumber.value.replace(/-/g, '');\r\n  if (!validatePhoneNumber(cleanedPhoneNumber)) {\r\n    phoneNumberState.value = 'error';\r\n    return;\r\n  }\r\n  phoneNumberState.value = 'default';\r\n\r\n  try {\r\n    await sendSmsLater(name.value, cleanedPhoneNumber);\r\n    state.verificationSent = true;\r\n  } catch (error) {\r\n    const smsError = error as { errorCode: string | null };\r\n    if (smsError.errorCode === 'INVALID_VALUE_04') {\r\n      codeState.value = 'error';\r\n      codeMessage.value = '이미 계정이 존재합니다.';\r\n    }\r\n  }\r\n};\r\n\r\nconst checkVerificationCode = async () => {\r\n  if (!state.verificationSent) return;\r\n\r\n  try {\r\n    const cleanedPhoneNumber = phoneNumber.value.replace(/-/g, '');\r\n    await checkSms(name.value, cleanedPhoneNumber, verificationCode.value);\r\n    router.push({\r\n      name: 'find-id-result',\r\n      query: {\r\n        name: name.value,\r\n        phoneNumber: cleanedPhoneNumber,\r\n      },\r\n    });\r\n  } catch (error) {\r\n    const smsError = error as { errorCode: string | null };\r\n    if (smsError.errorCode === 'AUTH_03') {\r\n      codeState.value = 'error';\r\n      codeMessage.value = '인증번호가 틀렸습니다.';\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.verification-container {\r\n  width: 100%;\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 20px;\r\n}\r\n\r\n.input-group {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 16px;\r\n}\r\n\r\n.next-button {\r\n  margin-top: auto;\r\n  align-self: center;\r\n}\r\n</style>\r\n","import script from \"./FindIDByPhone.vue?vue&type=script&setup=true&lang=ts\"\nexport * from \"./FindIDByPhone.vue?vue&type=script&setup=true&lang=ts\"\n\nimport \"./FindIDByPhone.vue?vue&type=style&index=0&id=57e3e2fd&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-57e3e2fd\"]])\n\nexport default __exports__"],"names":["headers","handleAxiosError","error","errorCode","axios","isAxiosError","response","data","originalError","sendSms","async","name","phoneNumber","url","post","checkSms","verificationCode","sendSmsLater","sendEmail","email","checkEmail","authCode","findUserId","sendEmailLater","_hoisted_1","class","_hoisted_2","_defineComponent","__name","setup","__props","router","useRouter","state","reactive","verificationSent","verificationExpired","ref","nameState","phoneNumberState","codeState","codeMessage","sendVerificationCode","value","length","cleanedPhoneNumber","replace","validatePhoneNumber","smsError","checkVerificationCode","push","query","_ctx","_cache","_openBlock","_createElementBlock","_createElementVNode","_createVNode","_unref","Input","placeholder","label","modelValue","$event","onInput","autoHyphen","maxlength","message","_createCommentVNode","_createBlock","Button","key","text","onClick","style","backgroundColor","color","height","fontSize","__exports__"],"sourceRoot":""}